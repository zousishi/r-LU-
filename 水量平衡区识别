///水量平衡区识别
library(terra)
library(data.table)
library(ggplot2)
library(magrittr)

# 1. 初始化与参数定义
rm(list = ls())
gc()

# 水分平衡区间参数（核心）
et_ranges <- data.table(
  land_use = c(1, 2, 6, 7, 8, 9, 10, 11, 12),
  type_name = c("农田", "乔木林地", "水域", "居民建设用地", 
                "其他用地(8)", "其他用地(9)", "低覆盖度灌木荒漠",
                "中覆盖度灌木荒漠", "高覆盖度灌木荒漠"),
  et_min = c(1280, 1370, 1130, 1240, 1130, 1130, 1250, 1340, 1500),
  et_max = c(1470, 1535, 1600, 1780, 1420, 1420, 1600, 1700, 2120)
)

# 2. 数据加载与预处理（核心步骤）
message("加载数据...")
land_use_map <- rast("E:/zou/data/LU/25.8LU/LU植被盖度.tif")
et_map <- rast("E:/zou/data/lalance/pre-wgs.tif")

# 研究区边界处理
message("处理边界...")
roi <- vect("E:/zou/data/LU/课题一研究区/沿黄岸线研究区.shp")
crs(roi) <- "EPSG:4326"  # 强制统一坐标系

# 坐标系统一与裁剪
if (!same.crs(land_use_map, roi)) {
  roi <- project(roi, crs(land_use_map))
}
land_use_clip <- crop(land_use_map, roi) %>% mask(roi)
et_clip <- crop(et_map, roi) %>% mask(roi) %>% resample(land_use_clip)

# 3. 分块计算函数（核心逻辑）
process_core <- function(lu, et, ranges) {
  result <- lu
  terra::values(result) <- NA
  stats_list <- list()
  
  for (i in seq(1, nrow(lu), by = 500)) {  # 分块大小固定为500
    row_end <- min(i + 499, nrow(lu))
    lu_chunk <- lu[i:row_end, , drop = FALSE]
    et_chunk <- et[i:row_end, , drop = FALSE]
    
    # 提取值并计算状态
    dt <- data.table(
      land_use = terra::values(lu_chunk),
      et = terra::values(et_chunk)
    )[complete.cases(land_use, et)] %>% 
      merge(ranges, by = "land_use") %>% 
      .[, status := fcase(
        et < et_min, 1L,
        et > et_max, 2L,
        default = 3L
      )]
    
    # 更新结果
    terra::values(result[i:row_end, ])[!is.na(dt$land_use)] <- dt$status
    stats_list[[length(stats_list) + 1]] <- dt[, .(type_name, status)]
    message(sprintf("进度: %.1f%%", i/nrow(lu)*100))
  }
  
  list(raster = result, stats = rbindlist(stats_list))
}

# 4. 执行分析与输出（核心任务）
message("开始计算...")
result <- process_core(land_use_clip, et_clip, et_ranges)

# 统计与可视化
balance_stats <- result$stats[, .(
  像元数 = .N,
  占比 = .N/nrow(result$stats)
), by = .(type_name, status = factor(status, 1:3, 
                                     c("水分匮缺", "水分盈余", "水分平衡")))]

ggplot(balance_stats, aes(x = type_name, y = 占比, fill = status)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
  labs(title = "沿黄岸线水分平衡状况", x = "用地类型", y = "比例") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# 保存结果
writeRaster(result$raster, "水分平衡结果.tif", overwrite = TRUE)
fwrite(balance_stats, "水分平衡统计.csv")
message("分析完成！")

////shp是写水量平衡
# 水量平衡分析（确保SHP文件包含完整关系字段）
# 分类标准：
# - 1：匮缺区：(pre30 - weighted_gw) < et30
# - 2：平衡区：其他情况
# - 3：盈余区：pre30 > et30
library(terra)
library(data.table)
library(sf)

# 1. 路径设置
rm(list = ls())
shp_path <- "E:/zou/30m/fish.shp"
output_shp <- "E:/zou/30m/水量平衡/水量平衡结果.shp"
output_stats <- "E:/zou/30m/水量平衡/水量平衡统计.csv"
dir.create(dirname(output_shp), showWarnings = FALSE)

# 2. 数据加载与检查
message("加载数据...")
shp_data <- st_read(shp_path, quiet = TRUE)
required_fields <- c("pre30", "wgs30", "et30", "wgsdeepth")
missing_fields <- setdiff(required_fields, names(shp_data))
if (length(missing_fields) > 0) {
  stop("错误：缺少字段 - ", paste(missing_fields, collapse = ", "))
}

# 3. 核心计算（确保所有水量平衡关系字段都被创建）
message("计算水量平衡关系...")
result <- shp_data

# 3.1 基础指标计算（全部保留在SHP中）
result$gw_multiplier <- ifelse(result$wgsdeepth > 0 & result$wgsdeepth < 10, 1, 0)
result$weighted_gw <- result$wgs30 * result$gw_multiplier  # 加权后地下水
result$pre_minus_gw <- result$pre30 - result$weighted_gw    # 降雨-加权地下水
result$pre_vs_et <- ifelse(result$pre30 > result$et30, "降雨>ET", "降雨≤ET")  # 降雨与ET关系
result$gw_et_relation <- ifelse(
  result$pre_minus_gw < result$et30, 
  "(降雨-地下水)<ET", 
  "(降雨-地下水)≥ET"
)  # 降雨-地下水与ET的关系

# 3.2 水量平衡分类（数字代码+文字描述）
result$balance_code <- ifelse(
  result$pre30 > result$et30, 3L,
  ifelse(result$pre_minus_gw < result$et30, 1L, 2L)
)
result$balance_class <- factor(
  result$balance_code,
  levels = c(1, 2, 3),
  labels = c("匮缺区", "平衡区", "盈余区")
)

# 4. 数据清洗
valid_rows <- complete.cases(st_drop_geometry(result[, required_fields]))
valid_data <- result[valid_rows, ]
total_valid <- nrow(valid_data)
total_all <- nrow(result)
message(sprintf("有效数据：%d 个（总数据：%d 个）", total_valid, total_all))

# 5. 统计分析
stats <- as.data.table(valid_data)[, .(
  要素数量 = .N,
  占比 = round(.N / total_valid, 4)
), by = .(balance_code, balance_class)]
setorder(stats, balance_code)

# 6. 导出结果（确保所有字段都被保存）
message("导出SHP文件（包含完整水量平衡关系字段）...")
# 强制保存所有计算字段，避免自动精简
st_write(result, output_shp, delete_dsn = TRUE, quiet = FALSE)
fwrite(stats, output_stats, encoding = "UTF-8")

# 7. 确认SHP文件包含的字段
shp_fields <- names(result)
cat("\n===== 导出的SHP文件包含以下水量平衡相关字段：=====\n")
print(shp_fields[shp_fields %in% c(
  "gw_multiplier", "weighted_gw", "pre_minus_gw",
  "pre_vs_et", "gw_et_relation", "balance_code", "balance_class"
)])

message("\n结果保存成功：")
message("- SHP文件路径：", output_shp)
message("- 统计表格路径：", output_stats)

message("生成空间分布地图...")
p_map <- ggplot() +
  geom_sf(data = valid_data, aes(fill = balance_class), color = NA, alpha = 0.8) +
  scale_fill_manual(
    values = c("#E74C3C", "#F39C12", "#27AE60"),
    name = "水量平衡分类"
  ) +
  labs(
    title = "沿黄岸线水量平衡空间分布",
    subtitle = "基于 (降雨-加权地下水) 与 ET 的关系分类"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 11),
    legend.position = "bottom"
  )
ggsave(paste0(output_plots, "水量平衡空间分布.png"), p_map, 
       width = 10, height = 8, dpi = 300)
print(p_map)
