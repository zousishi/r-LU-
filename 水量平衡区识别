///水量平衡区识别
library(terra)
library(data.table)
library(ggplot2)
library(magrittr)

# 1. 初始化与参数定义
rm(list = ls())
gc()

# 水分平衡区间参数（核心）
et_ranges <- data.table(
  land_use = c(1, 2, 6, 7, 8, 9, 10, 11, 12),
  type_name = c("农田", "乔木林地", "水域", "居民建设用地", 
                "其他用地(8)", "其他用地(9)", "低覆盖度灌木荒漠",
                "中覆盖度灌木荒漠", "高覆盖度灌木荒漠"),
  et_min = c(1280, 1370, 1130, 1240, 1130, 1130, 1250, 1340, 1500),
  et_max = c(1470, 1535, 1600, 1780, 1420, 1420, 1600, 1700, 2120)
)

# 2. 数据加载与预处理（核心步骤）
message("加载数据...")
land_use_map <- rast("E:/zou/data/LU/25.8LU/LU植被盖度.tif")
et_map <- rast("E:/zou/data/lalance/pre-wgs.tif")

# 研究区边界处理
message("处理边界...")
roi <- vect("E:/zou/data/LU/课题一研究区/沿黄岸线研究区.shp")
crs(roi) <- "EPSG:4326"  # 强制统一坐标系

# 坐标系统一与裁剪
if (!same.crs(land_use_map, roi)) {
  roi <- project(roi, crs(land_use_map))
}
land_use_clip <- crop(land_use_map, roi) %>% mask(roi)
et_clip <- crop(et_map, roi) %>% mask(roi) %>% resample(land_use_clip)

# 3. 分块计算函数（核心逻辑）
process_core <- function(lu, et, ranges) {
  result <- lu
  terra::values(result) <- NA
  stats_list <- list()
  
  for (i in seq(1, nrow(lu), by = 500)) {  # 分块大小固定为500
    row_end <- min(i + 499, nrow(lu))
    lu_chunk <- lu[i:row_end, , drop = FALSE]
    et_chunk <- et[i:row_end, , drop = FALSE]
    
    # 提取值并计算状态
    dt <- data.table(
      land_use = terra::values(lu_chunk),
      et = terra::values(et_chunk)
    )[complete.cases(land_use, et)] %>% 
      merge(ranges, by = "land_use") %>% 
      .[, status := fcase(
        et < et_min, 1L,
        et > et_max, 2L,
        default = 3L
      )]
    
    # 更新结果
    terra::values(result[i:row_end, ])[!is.na(dt$land_use)] <- dt$status
    stats_list[[length(stats_list) + 1]] <- dt[, .(type_name, status)]
    message(sprintf("进度: %.1f%%", i/nrow(lu)*100))
  }
  
  list(raster = result, stats = rbindlist(stats_list))
}

# 4. 执行分析与输出（核心任务）
message("开始计算...")
result <- process_core(land_use_clip, et_clip, et_ranges)

# 统计与可视化
balance_stats <- result$stats[, .(
  像元数 = .N,
  占比 = .N/nrow(result$stats)
), by = .(type_name, status = factor(status, 1:3, 
                                     c("水分匮缺", "水分盈余", "水分平衡")))]

ggplot(balance_stats, aes(x = type_name, y = 占比, fill = status)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
  labs(title = "沿黄岸线水分平衡状况", x = "用地类型", y = "比例") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# 保存结果
writeRaster(result$raster, "水分平衡结果.tif", overwrite = TRUE)
fwrite(balance_stats, "水分平衡统计.csv")
message("分析完成！")

////shp是写水量平衡
#水量平衡区识别
library(terra)
library(data.table)
library(ggplot2)
library(magrittr)
library(sf)

# 1. 初始化与参数定义
rm(list = ls())
gc()

# 2. 数据加载与预处理
message("加载数据...")
# 加载包含et和pre_wgs字段的shp文件
shp_data <- st_read("E:/zou/Marxan/数据/渔网/pulayer.shp")

# 检查shp文件是否包含所需的字段
if (!all(c("et", "pre_wgs") %in% names(shp_data))) {
  stop("shp文件必须包含'et'和'pre_wgs'字段")
}

# 3. 计算水分平衡状态（PRE_WGS - ET/10）
calculate_water_balance <- function(shp_data) {
  # 创建数据副本
  result_shp <- shp_data
  
  # 计算ET/10
  result_shp$et_div10 <- result_shp$et / 10
  
  # 计算 PRE_WGS - ET/10
  result_shp$water_balance_diff <- result_shp$pre_wgs - result_shp$et_div10
  
  # 计算水分平衡状态
  result_shp$water_status <- ifelse(
    result_shp$water_balance_diff < 100, 1L,  # 水分匮缺：差值 < 100
    ifelse(result_shp$water_balance_diff > 120, 2L, 3L)  # 水分盈余：差值 > 120，平衡：100-120之间
  )
  
  # 添加状态描述字段
  result_shp$status_desc <- factor(
    result_shp$water_status,
    levels = c(1, 2, 3),
    labels = c("水分匮缺", "水分盈余", "水分平衡")
  )
  
  return(result_shp)
}

# 4. 执行分析与输出
message("开始计算水分平衡...")
result_shp <- calculate_water_balance(shp_data)

# 移除NA值
valid_data <- result_shp[complete.cases(result_shp$et, result_shp$pre_wgs), ]

# 统计与可视化
if (nrow(valid_data) > 0) {
  # 转换为数据表进行统计
  result_dt <- as.data.table(valid_data)
  
  # 基本统计
  balance_stats <- result_dt[, .(
    要素数量 = .N,
    占比 = .N/nrow(result_dt),
    平均ET = mean(et, na.rm = TRUE),
    平均ET_div10 = mean(et_div10, na.rm = TRUE),
    平均PRE_WGS = mean(pre_wgs, na.rm = TRUE),
    平均水分差值 = mean(water_balance_diff, na.rm = TRUE),
    最小差值 = min(water_balance_diff, na.rm = TRUE),
    最大差值 = max(water_balance_diff, na.rm = TRUE)
  ), by = .(status = status_desc)]
  
  # 可视化1：水分平衡状态比例
  p1 <- ggplot(balance_stats, aes(x = status, y = 占比, fill = status)) +
    geom_col() +
    scale_fill_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
    labs(title = "沿黄岸线水分平衡状况分布", 
         subtitle = "基于 PRE_WGS - ET/10 的差值判断",
         x = "水分平衡状态", y = "比例") +
    theme_minimal() +
    geom_text(aes(label = paste0(round(占比 * 100, 1), "%")), 
              position = position_stack(vjust = 0.5), size = 5)
  
  print(p1)
  
  # 可视化2：水分差值分布直方图
  p2 <- ggplot(result_dt, aes(x = water_balance_diff, fill = status_desc)) +
    geom_histogram(bins = 30, alpha = 0.7) +
    geom_vline(xintercept = c(100, 120), linetype = "dashed", color = "red") +
    scale_fill_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A"),
                      name = "水分状态") +
    labs(title = "水分差值分布直方图 (PRE_WGS - ET/10)",
         x = "水分差值", y = "频数") +
    theme_minimal() +
    annotate("text", x = 50, y = max(table(cut(result_dt$water_balance_diff, 30))), 
             label = "匮缺区\n<100", color = "red", size = 4) +
    annotate("text", x = 140, y = max(table(cut(result_dt$water_balance_diff, 30))), 
             label = "盈余区\n>120", color = "red", size = 4)
  
  print(p2)
  
  # 保存带有结果字段的shp文件
  message("正在保存结果到shp文件...")
  st_write(result_shp, "沿黄岸线水分平衡结果.shp", delete_dsn = TRUE)
  
  # 保存统计结果
  fwrite(balance_stats, "水分平衡统计.csv")
  
  message("分析完成！")
  message(sprintf("总共处理了 %d 个要素", nrow(result_shp)))
  message(sprintf("有效数据 %d 个要素", nrow(valid_data)))
  
  # 输出详细统计信息
  cat("\n=== 水分平衡状态统计 ===\n")
  stats_summary <- result_dt[, .(
    数量 = .N,
    比例 = paste0(round(.N/nrow(result_dt)*100, 1), "%"),
    平均ET = round(mean(et), 2),
    平均ET_div10 = round(mean(et_div10), 2),
    平均PRE_WGS = round(mean(pre_wgs), 2),
    平均水分差值 = round(mean(water_balance_diff), 2),
    差值范围 = paste0(round(min(water_balance_diff), 1), " - ", round(max(water_balance_diff), 1))
  ), by = .(状态 = status_desc)]
  
  print(stats_summary)
  
  # 整体统计
  overall_stats <- result_dt[, .(
    总要素数 = nrow(result_shp),
    有效要素数 = nrow(valid_data),
    水分匮缺数量 = sum(water_status == 1),
    水分盈余数量 = sum(water_status == 2),
    水分平衡数量 = sum(water_status == 3),
    水分匮缺比例 = paste0(round(sum(water_status == 1) / nrow(valid_data) * 100, 1, "%"),
    水分盈余比例 = paste0(round(sum(water_status == 2) / nrow(valid_data) * 100, 1), "%"),
    水分平衡比例 = paste0(round(sum(water_status == 3) / nrow(valid_data) * 100, 1), "%"),
    整体平均差值 = round(mean(water_balance_diff), 2)
  )]
  
  cat("\n=== 整体水分平衡状况 ===\n")
  print(overall_stats)
  
  fwrite(overall_stats, "整体水分平衡统计.csv")
  
  # 输出判断阈值信息（统一改为120）
  cat("\n=== 判断阈值 ===\n")
  cat("水分匮缺区: PRE_WGS - ET/10 < 100\n")
  cat("水分平衡区: 100 ≤ PRE_WGS - ET/10 ≤ 120\n")
  cat("水分盈余区: PRE_WGS - ET/10 > 120\n")
  
  # 输出shp文件字段信息
  cat("\n=== 输出shp文件字段信息 ===\n")
  cat("新增字段：\n")
  cat("- et_div10: ET值除以10的结果\n")
  cat("- water_balance_diff: PRE_WGS - ET/10 的差值\n")
  cat("- water_status: 水分状态（1=匮缺，2=盈余，3=平衡）\n")
  cat("- status_desc: 状态描述\n")
  
} else {
  message("没有找到有效的ET和PRE_WGS数据")
  st_write(result_shp, "沿黄岸线水分平衡结果.shp", delete_dsn = TRUE)
  message("已保存shp文件，但部分字段可能包含NA值")
}

# 5. 输出文件信息
message("\n=== 输出文件信息 ===")
message("1. 沿黄岸线水分平衡结果.shp - 包含水分平衡分析结果的shapefile")
message("2. 水分平衡统计.csv - 详细的统计信息")
message("3. 整体水分平衡统计.csv - 整体统计信息")

# 显示结果示例
if (nrow(valid_data) > 0) {
  cat("\n=== 前6个要素的结果示例 ===\n")
  print(head(as.data.frame(valid_data)[, c("et", "et_div10", "pre_wgs", "water_balance_diff", "water_status", "status_desc")]))
}
