///水量平衡区识别
library(terra)
library(data.table)
library(ggplot2)
library(magrittr)

# 1. 初始化与参数定义
rm(list = ls())
gc()

# 水分平衡区间参数（核心）
et_ranges <- data.table(
  land_use = c(1, 2, 6, 7, 8, 9, 10, 11, 12),
  type_name = c("农田", "乔木林地", "水域", "居民建设用地", 
                "其他用地(8)", "其他用地(9)", "低覆盖度灌木荒漠",
                "中覆盖度灌木荒漠", "高覆盖度灌木荒漠"),
  et_min = c(1280, 1370, 1130, 1240, 1130, 1130, 1250, 1340, 1500),
  et_max = c(1470, 1535, 1600, 1780, 1420, 1420, 1600, 1700, 2120)
)

# 2. 数据加载与预处理（核心步骤）
message("加载数据...")
land_use_map <- rast("E:/zou/data/LU/25.8LU/LU植被盖度.tif")
et_map <- rast("E:/zou/data/lalance/pre-wgs.tif")

# 研究区边界处理
message("处理边界...")
roi <- vect("E:/zou/data/LU/课题一研究区/沿黄岸线研究区.shp")
crs(roi) <- "EPSG:4326"  # 强制统一坐标系

# 坐标系统一与裁剪
if (!same.crs(land_use_map, roi)) {
  roi <- project(roi, crs(land_use_map))
}
land_use_clip <- crop(land_use_map, roi) %>% mask(roi)
et_clip <- crop(et_map, roi) %>% mask(roi) %>% resample(land_use_clip)

# 3. 分块计算函数（核心逻辑）
process_core <- function(lu, et, ranges) {
  result <- lu
  terra::values(result) <- NA
  stats_list <- list()
  
  for (i in seq(1, nrow(lu), by = 500)) {  # 分块大小固定为500
    row_end <- min(i + 499, nrow(lu))
    lu_chunk <- lu[i:row_end, , drop = FALSE]
    et_chunk <- et[i:row_end, , drop = FALSE]
    
    # 提取值并计算状态
    dt <- data.table(
      land_use = terra::values(lu_chunk),
      et = terra::values(et_chunk)
    )[complete.cases(land_use, et)] %>% 
      merge(ranges, by = "land_use") %>% 
      .[, status := fcase(
        et < et_min, 1L,
        et > et_max, 2L,
        default = 3L
      )]
    
    # 更新结果
    terra::values(result[i:row_end, ])[!is.na(dt$land_use)] <- dt$status
    stats_list[[length(stats_list) + 1]] <- dt[, .(type_name, status)]
    message(sprintf("进度: %.1f%%", i/nrow(lu)*100))
  }
  
  list(raster = result, stats = rbindlist(stats_list))
}

# 4. 执行分析与输出（核心任务）
message("开始计算...")
result <- process_core(land_use_clip, et_clip, et_ranges)

# 统计与可视化
balance_stats <- result$stats[, .(
  像元数 = .N,
  占比 = .N/nrow(result$stats)
), by = .(type_name, status = factor(status, 1:3, 
                                     c("水分匮缺", "水分盈余", "水分平衡")))]

ggplot(balance_stats, aes(x = type_name, y = 占比, fill = status)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("#E41A1C", "#377EB8", "#4DAF4A")) +
  labs(title = "沿黄岸线水分平衡状况", x = "用地类型", y = "比例") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# 保存结果
writeRaster(result$raster, "水分平衡结果.tif", overwrite = TRUE)
fwrite(balance_stats, "水分平衡统计.csv")
message("分析完成！")

////shp是写水量平衡----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 水量平衡分析（修正投影转换错误）
library(terra)
library(sf)
library(data.table)
library(ggplot2)

# 1. 路径设置
rm(list = ls())
shp_path <- "E:/zou/30m/sixfish.shp"       # 矢量数据路径
gw_depth_tif <- "E:/zou/30m/投影/wgsdeepth10.tif"  # 地下水埋深栅格路径
output_shp <- "E:/zou/30m/水量平衡/水量平衡结果.shp"
output_stats <- "E:/zou/30m/水量平衡/水量平衡统计.csv"
output_plots <- "E:/zou/30m/水量平衡/"
dir.create(dirname(output_shp), showWarnings = FALSE)
dir.create(output_plots, showWarnings = FALSE)

# 2. 数据加载与投影匹配（核心修复部分）
message("加载数据并匹配投影...")
# 加载矢量数据并获取原始CRS
shp_data <- st_read(shp_path, quiet = TRUE)
original_crs_sf <- st_crs(shp_data)  # 获取sf格式的CRS（用于矢量）
original_crs_terra <- crs(vect(shp_data))  # 转换为terra兼容的CRS格式（用于栅格）
message("原始矢量投影：", original_crs_sf$input)

# 检查必要字段
required_fields <- c("pre", "wgs", "et")
missing_fields <- setdiff(required_fields, names(shp_data))
if (length(missing_fields) > 0) {
  stop("矢量数据缺少字段：", paste(missing_fields, collapse = ", "))
}

# 加载栅格数据并转换投影（关键修复：使用terra兼容的CRS）
gw_rast <- rast(gw_depth_tif)
if (!file.exists(gw_depth_tif)) {
  stop("栅格文件不存在：", gw_depth_tif)
}
message("栅格原始投影：", crs(gw_rast))

# 转换栅格投影为与矢量一致（使用terra的crs格式避免错误）
gw_rast <- project(gw_rast, original_crs_terra)
message("栅格已转换为与矢量一致的投影：", crs(gw_rast))

# 3. 提取栅格数据到矢量，创建deepwgs字段
message("提取栅格数据到矢量，创建deepwgs字段...")
calc_mode <- function(x, na.rm = TRUE) {
  if (na.rm) x <- x[!is.na(x)]
  if (length(x) == 0) return(NA)
  tab <- table(x)
  if (length(tab) == 1) return(as.numeric(names(tab)))
  if (tab[1] == tab[2]) return(1)  # 平局时默认1（10m以内）
  return(as.numeric(names(tab)[which.max(tab)]))
}

# 提取栅格值到矢量（基于匹配后的投影）
extracted <- extract(
  x = gw_rast,
  y = vect(shp_data),  # 转换为terra的vect格式用于提取
  fun = calc_mode,
  na.rm = TRUE
)
if (nrow(extracted) != nrow(shp_data)) {
  stop("栅格提取结果行数与矢量不匹配！矢量：", nrow(shp_data), "，提取：", nrow(extracted))
}
shp_data$deepwgs <- extracted[, 2]
shp_data$deepwgs[is.na(shp_data$deepwgs)] <- 0  # NA填充为0（>10m）
message("deepwgs字段创建成功，共", length(shp_data$deepwgs), "个值（0=>10m，1=≤10m）")

# 4. 核心水量平衡计算
message("开始水量平衡计算...")
result <- shp_data

# 4.1 基础指标计算
result$weighted_gw <- result$wgs * result$deepwgs
result$pre_minus_gw <- result$pre - result$weighted_gw

# 4.2 水量平衡分类
result$balance_code <- ifelse(
  result$pre > result$et, 3L,
  ifelse(result$pre_minus_gw < result$et, 1L, 2L)
)
result$balance_class <- factor(
  result$balance_code,
  levels = c(1, 2, 3),
  labels = c("匮缺区", "平衡区", "盈余区")
)

# 5. 数据清洗与统计
valid_rows <- complete.cases(st_drop_geometry(result[, required_fields]))
valid_data <- result[valid_rows, ]
total_valid <- nrow(valid_data)
message("有效数据：", total_valid, "个（总数据：", nrow(result), "个）")

stats <- as.data.table(valid_data)[, .(
  要素数量 = .N,
  占比 = round(.N / total_valid, 4)
), by = .(balance_code, balance_class)]
setorder(stats, balance_code)

# 6. 导出结果（保持原始投影）
message("导出结果...")
st_write(result, output_shp, delete_dsn = TRUE, quiet = FALSE)
fwrite(stats, output_stats, encoding = "UTF-8")

# 7. 生成空间分布图
p_map <- ggplot() +
  geom_sf(data = valid_data, aes(fill = balance_class), color = NA, alpha = 0.8) +
  scale_fill_manual(values = c("#E74C3C", "#F39C12", "#27AE60"), name = "水量平衡分类") +
  labs(title = "水量平衡空间分布", subtitle = "基于降雨、地下水与ET的关系") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom")
ggsave(paste0(output_plots, "水量平衡分布.png"), p_map, width = 10, height = 8, dpi = 300)

message("所有操作完成！结果投影与原始矢量一致：", st_crs(result)$input)
message("结果SHP：", output_shp)
message("统计表格：", output_stats)
